{"ast":null,"code":"var _jsxFileName = \"/Users/brentilejay/Projects/Spatial-Harmonies/client/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\nimport BedPlacement from './components/BedPlacement/BedPlacement.jsx';\nimport titleGIF from './components/images/titleGIF.gif';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [roomData, setRoomData] = useState({\n    width: 0,\n    length: 0,\n    doorPosition: 0,\n    windowWall: '',\n    windowPosition: 0\n  });\n  const [roomLayoutGenerated, setRoomLayoutGenerated] = useState(false);\n  const [bedLayout, setBedLayout] = useState([]);\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    // Extract form data\n    const formData = {\n      width: parseFloat(event.target.width.value),\n      length: parseFloat(event.target.length.value),\n      doorPosition: parseFloat(event.target.doorPosition.value),\n      windowWall: event.target.windowWall.value,\n      windowPosition: parseFloat(event.target.windowPosition.value)\n    };\n\n    // Update local state with room data\n    setRoomData(formData);\n\n    // Set room layout generated to true\n    setRoomLayoutGenerated(true);\n  };\n\n  // Function to update door position in App component\n  const updateDoorPosition = newPosition => {\n    setRoomData(prevRoomData => ({\n      ...prevRoomData,\n      doorPosition: newPosition\n    }));\n  };\n  const generateBedLayout = () => {\n    // Send room data to backend\n    fetch('http://localhost:8000/api/roomdata', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(roomData)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Received response from backend:', data);\n      // Set bed layout received from backend\n      setBedLayout(data.bedCoordinates);\n      /*\n      // Handle response data\n      if (Array.isArray(data)) {\n          setBedLayout(data);\n      } else {\n          console.error('Data received for bedLayout is not an array:', data);\n      }\n      console.log('Received response from backend:', data.bedCoordinates);\n      // Set bed layout received from backend\n      setBedLayout(data);\n      console.log('this the coord', bedLayout);\n           // Now that bed layout is received, you can perform any other necessary operations\n      // For example, you can navigate to a different page or show a modal with the bed layout\n      */\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"gif-with-shadow\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: titleGIF,\n        style: {\n          width: '500px',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"width\",\n          children: \"Width:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"width\",\n          name: \"width\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"length\",\n          children: \"Length:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"length\",\n          name: \"length\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"doorPosition\",\n          children: \"Door Position:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"doorPosition\",\n          name: \"doorPosition\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"windowWall\",\n          children: \"Window Wall:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"windowWall\",\n          name: \"windowWall\",\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"top\",\n            children: \"Top\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bottom\",\n            children: \"Bottom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"left\",\n            children: \"Left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"right\",\n            children: \"Right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"windowPosition\",\n          children: \"Window Position:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"windowPosition\",\n          name: \"windowPosition\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [roomLayoutGenerated && /*#__PURE__*/_jsxDEV(RoomVisualizer, {\n        roomData: roomData,\n        bedLayout: bedLayout,\n        updateDoorPosition: updateDoorPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 41\n      }, this), bedLayout && /*#__PURE__*/_jsxDEV(BedPlacement, {\n        bedLayout: bedLayout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 32\n      }, this), roomLayoutGenerated && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateBedLayout,\n        children: \"Generate Bed Layout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"oQOUFFaZ47XgJDvw/pGuFYc4Zis=\");\n_c = App;\nexport default App;\n\n/*\n    const generateBedLayout = () => {\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(roomData)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            // Handle response data\n            console.log('Received response from backend:', data);\n            // Set bed layout received from backend\n            setBedLayout(data.bedLayout);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n    };\n    */\n\n/*\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\nimport './App.css';\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const [roomLayoutGenerated, setRoomLayoutGenerated] = useState(false);\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        // Extract form data\n        const formData = {\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        };\n\n        // Log the data before sending it to the backend\n        console.log('Sending data to backend:', formData);\n\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            // Handle response data\n            console.log('Received response from backend:', data);\n            console.log('Calculated area:', data.area);\n\n            // Set room layout generated to true\n            setRoomLayoutGenerated(true);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n\n        // Update local state with room data\n        setRoomData(formData);\n    };\n\n    const generateBedLayout = () => {\n        // Call the API endpoint to generate the room layout using the bed placement algorithm\n        // You can implement this part as per your backend API design\n        console.log('Generating bed layout...');\n    };\n\n    return (\n        <div>\n            <h1>Room Visualizer</h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n\n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    <button type=\"submit\">Submit</button>\n                    \n                </form>\n            </div>\n            <div> \n                <RoomVisualizer roomData={roomData} />\n\n                {roomLayoutGenerated && (\n                    <button onClick={generateBedLayout}>Generate Bed Layout</button>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n*/\n\n/*\n\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\nimport './App.css';\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        // Extract form data\n        const formData = {\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        };\n\n        // Log the data before sending it to the backend\n        console.log('Sending data to backend:', formData);\n\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            // Handle response data\n            console.log('Received response from backend:', data);\n            console.log('Calculated area:', data.area);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n\n        // Update local state with room data\n        setRoomData(formData);\n    };\n\n    return (\n        <div>\n            <h1>Room Visualizer</h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                    <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n\n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            <div> \n              <RoomVisualizer roomData={roomData} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n*/\n\n/*\nimport logo from './logo.svg';\n\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\n//import floorImage from './components/images/WoodFloorPattern.jpeg';\nimport './App.css';\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n        // Logic to handle form submission and update roomData\n        // You can perform validation and other operations here before updating roomData\n        // For now, let's assume you update roomData directly\n        setRoomData({\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        });\n    };\n\n    return (\n        <div>\n            <h1>Room Visualizer</h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                    <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n\n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            <div> \n              <RoomVisualizer roomData={roomData} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","RoomVisualizer","BedPlacement","titleGIF","jsxDEV","_jsxDEV","App","_s","roomData","setRoomData","width","length","doorPosition","windowWall","windowPosition","roomLayoutGenerated","setRoomLayoutGenerated","bedLayout","setBedLayout","handleFormSubmit","event","preventDefault","formData","parseFloat","target","value","updateDoorPosition","newPosition","prevRoomData","generateBedLayout","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","console","log","bedCoordinates","catch","error","children","className","src","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","required","onClick","_c","$RefreshReg$"],"sources":["/Users/brentilejay/Projects/Spatial-Harmonies/client/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\nimport BedPlacement from './components/BedPlacement/BedPlacement.jsx';\nimport titleGIF from './components/images/titleGIF.gif'\nimport './App.css';\n\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const [roomLayoutGenerated, setRoomLayoutGenerated] = useState(false);\n    const [bedLayout, setBedLayout] = useState([]);\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        // Extract form data\n        const formData = {\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        };\n\n        \n\n        // Update local state with room data\n        setRoomData(formData);\n\n        // Set room layout generated to true\n        setRoomLayoutGenerated(true);\n    };\n\n    // Function to update door position in App component\n    const updateDoorPosition = (newPosition) => {\n        setRoomData(prevRoomData => ({\n            ...prevRoomData,\n            doorPosition: newPosition\n        }));\n    };\n\n    const generateBedLayout = () => {\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(roomData)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log('Received response from backend:', data);\n            // Set bed layout received from backend\n            setBedLayout(data.bedCoordinates);\n            /*\n            // Handle response data\n            if (Array.isArray(data)) {\n                setBedLayout(data);\n            } else {\n                console.error('Data received for bedLayout is not an array:', data);\n            }\n            console.log('Received response from backend:', data.bedCoordinates);\n            // Set bed layout received from backend\n            setBedLayout(data);\n            console.log('this the coord', bedLayout);\n    \n            // Now that bed layout is received, you can perform any other necessary operations\n            // For example, you can navigate to a different page or show a modal with the bed layout\n            */\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n    };\n    \n\n\n\n\n    return (\n        <div>\n            <h1 className=\"gif-with-shadow\">\n                <img src={titleGIF} style={{ width: '500px', height: 'auto' }} />\n            </h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n    \n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    \n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            <div>\n                {/* Display room visualizer */}\n                {roomLayoutGenerated && <RoomVisualizer roomData={roomData} bedLayout={bedLayout} updateDoorPosition={updateDoorPosition} />}\n\n                {/* Render BedPlacement if bed layout has been generated \n                \n                */}\n                { bedLayout && <BedPlacement bedLayout={bedLayout} />}\n\n                {/* Render button to generate bed layout */}\n                {roomLayoutGenerated && (\n                    <button onClick={generateBedLayout}>Generate Bed Layout</button>\n                )}\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n\n/*\n    const generateBedLayout = () => {\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(roomData)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            // Handle response data\n            console.log('Received response from backend:', data);\n            // Set bed layout received from backend\n            setBedLayout(data.bedLayout);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n    };\n    */\n\n/*\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\nimport './App.css';\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const [roomLayoutGenerated, setRoomLayoutGenerated] = useState(false);\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        // Extract form data\n        const formData = {\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        };\n\n        // Log the data before sending it to the backend\n        console.log('Sending data to backend:', formData);\n\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            // Handle response data\n            console.log('Received response from backend:', data);\n            console.log('Calculated area:', data.area);\n\n            // Set room layout generated to true\n            setRoomLayoutGenerated(true);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n\n        // Update local state with room data\n        setRoomData(formData);\n    };\n\n    const generateBedLayout = () => {\n        // Call the API endpoint to generate the room layout using the bed placement algorithm\n        // You can implement this part as per your backend API design\n        console.log('Generating bed layout...');\n    };\n\n    return (\n        <div>\n            <h1>Room Visualizer</h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n\n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    <button type=\"submit\">Submit</button>\n                    \n                </form>\n            </div>\n            <div> \n                <RoomVisualizer roomData={roomData} />\n\n                {roomLayoutGenerated && (\n                    <button onClick={generateBedLayout}>Generate Bed Layout</button>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n*/\n\n\n/*\n\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\nimport './App.css';\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        // Extract form data\n        const formData = {\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        };\n\n        // Log the data before sending it to the backend\n        console.log('Sending data to backend:', formData);\n\n        // Send room data to backend\n        fetch('http://localhost:8000/api/roomdata', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(data => {\n            // Handle response data\n            console.log('Received response from backend:', data);\n            console.log('Calculated area:', data.area);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n\n        // Update local state with room data\n        setRoomData(formData);\n    };\n\n    return (\n        <div>\n            <h1>Room Visualizer</h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                    <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n\n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            <div> \n              <RoomVisualizer roomData={roomData} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n*/\n\n\n/*\nimport logo from './logo.svg';\n\nimport React, { useState } from 'react';\nimport RoomVisualizer from './components/RoomVisualizer/RoomVisualizer.jsx';\n//import floorImage from './components/images/WoodFloorPattern.jpeg';\nimport './App.css';\n\nfunction App() {\n    const [roomData, setRoomData] = useState({\n        width: 0,\n        length: 0,\n        doorPosition: 0,\n        windowWall: '',\n        windowPosition: 0\n    });\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n        // Logic to handle form submission and update roomData\n        // You can perform validation and other operations here before updating roomData\n        // For now, let's assume you update roomData directly\n        setRoomData({\n            width: parseFloat(event.target.width.value),\n            length: parseFloat(event.target.length.value),\n            doorPosition: parseFloat(event.target.doorPosition.value),\n            windowWall: event.target.windowWall.value,\n            windowPosition: parseFloat(event.target.windowPosition.value)\n        });\n    };\n\n    return (\n        <div>\n            <h1>Room Visualizer</h1>\n            <div className=\"form-container\">\n                <form onSubmit={handleFormSubmit}>\n                    <label htmlFor=\"width\">Width:</label>\n                    <input type=\"number\" id=\"width\" name=\"width\" required />\n\n                    <label htmlFor=\"length\">Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" required />\n\n                    <label htmlFor=\"doorPosition\">Door Position:</label>\n                    <input type=\"number\" id=\"doorPosition\" name=\"doorPosition\" required />\n\n                    <label htmlFor=\"windowWall\">Window Wall:</label>\n                    <select id=\"windowWall\" name=\"windowWall\" required>\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                    </select>\n\n                    <label htmlFor=\"windowPosition\">Window Position:</label>\n                    <input type=\"number\" id=\"windowPosition\" name=\"windowPosition\" required />\n\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n            <div> \n              <RoomVisualizer roomData={roomData} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}