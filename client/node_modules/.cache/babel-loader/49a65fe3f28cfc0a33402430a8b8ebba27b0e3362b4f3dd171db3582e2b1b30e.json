{"ast":null,"code":"var _jsxFileName = \"/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoomVisualizer({\n  roomData\n}) {\n  _s();\n  const [doorPositionY, setDoorPositionY] = useState(0); // Initial position of the door\n\n  const handleMouseDown = event => {\n    // Calculate initial mouse position\n    const initialMouseY = event.clientY;\n    const handleMouseMove = event => {\n      // Calculate the new position of the door based on mouse movement\n      const mouseY = event.clientY;\n      const deltaY = mouseY - initialMouseY;\n      const newDoorPositionY = doorPositionY + deltaY;\n\n      // Update the position of the door within the bounds of the left wall\n      if (newDoorPositionY >= 0 && newDoorPositionY <= roomLength) {\n        setDoorPositionY(newDoorPositionY);\n      }\n    };\n    const handleMouseUp = () => {\n      // Remove event listeners when mouse is released\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    // Add event listeners for mouse movement and release\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Assuming roomData contains dimensions in inches\n  const {\n    width,\n    length,\n    doorPosition,\n    windowWall,\n    windowPosition\n  } = roomData;\n\n  // Define the scale factor (1 inch = 10 SVG units)\n  const scaleFactor = 5;\n\n  // Door and window widths\n  const doorWidthInches = 32;\n  const doorThickness = 2;\n  const windowWidthInches = 22;\n\n  // Convert inch measurements to SVG units\n  const roomWidth = width * scaleFactor;\n  const roomLength = length * scaleFactor;\n\n  // Calculate the width and height of the door and window proportionate to the room\n  const doorWidth = doorWidthInches * scaleFactor;\n  const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n  const windowHeight = 2 * scaleFactor; // Height of the window line\n\n  // Your other code here...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-visualizer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: roomWidth,\n      height: roomLength,\n      className: \"room-svg\",\n      children: /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: 0,\n        y: doorPositionY,\n        width: 2 * scaleFactor,\n        height: doorWidth,\n        fill: \"brown\",\n        onMouseDown: handleMouseDown,\n        style: {\n          cursor: 'grab'\n        } // Change cursor to indicate draggable element\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n/*\n\nimport React from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\n\n\nfunction RoomVisualizer({ roomData }) {\n    // Assuming roomData contains dimensions in inches\n    const { width, length, doorPosition, windowWall, windowPosition } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 32;\n    const doorThickness = 2;\n\n    const windowWidthInches = 22;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = width * scaleFactor;\n    const roomLength = length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2 *scaleFactor; // Height of the window line\n\n    return (\n        <div className=\"room-visualizer-container\"> \n\n            <svg \n                width={roomWidth} \n                height={roomLength}\n                className=\"room-svg\"\n            >\n                <image href={floorImage} x=\"0\" y=\"0\" width={roomWidth} height={roomLength} preserveAspectRatio=\"none\" />\n \n\n                <rect x=\"0\" y={doorPosition * scaleFactor} width={2 * scaleFactor} height={doorWidth} fill=\"brown\" />\n\n               \n\n                {windowWall === 'top' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y=\"0\" width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'bottom' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y={roomLength - windowHeight} width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'left' && (\n                    <rect x=\"-5\" y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n                {windowWall === 'right' && (\n                    <rect x={(roomWidth)-5} y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n            </svg>\n        </div>\n    );\n}\n\nexport default RoomVisualizer;\n\n*/\n_s(RoomVisualizer, \"Xq6/khDaL+O0Mt+rB4fZ5sDPU3M=\");\n_c = RoomVisualizer;\nvar _c;\n$RefreshReg$(_c, \"RoomVisualizer\");","map":{"version":3,"names":["React","floorImage","jsxDEV","_jsxDEV","RoomVisualizer","roomData","_s","doorPositionY","setDoorPositionY","useState","handleMouseDown","event","initialMouseY","clientY","handleMouseMove","mouseY","deltaY","newDoorPositionY","roomLength","handleMouseUp","window","removeEventListener","addEventListener","width","length","doorPosition","windowWall","windowPosition","scaleFactor","doorWidthInches","doorThickness","windowWidthInches","roomWidth","doorWidth","doorHeight","windowHeight","className","children","height","x","y","fill","onMouseDown","style","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx"],"sourcesContent":["import React from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\n\nfunction RoomVisualizer({ roomData }) {\n    \n    const [doorPositionY, setDoorPositionY] = useState(0); // Initial position of the door\n\n    const handleMouseDown = (event) => {\n        // Calculate initial mouse position\n        const initialMouseY = event.clientY;\n\n        const handleMouseMove = (event) => {\n            // Calculate the new position of the door based on mouse movement\n            const mouseY = event.clientY;\n            const deltaY = mouseY - initialMouseY;\n            const newDoorPositionY = doorPositionY + deltaY;\n\n            // Update the position of the door within the bounds of the left wall\n            if (newDoorPositionY >= 0 && newDoorPositionY <= roomLength) {\n                setDoorPositionY(newDoorPositionY);\n            }\n        };\n\n        const handleMouseUp = () => {\n            // Remove event listeners when mouse is released\n            window.removeEventListener('mousemove', handleMouseMove);\n            window.removeEventListener('mouseup', handleMouseUp);\n        };\n\n        // Add event listeners for mouse movement and release\n        window.addEventListener('mousemove', handleMouseMove);\n        window.addEventListener('mouseup', handleMouseUp);\n    };\n\n    // Assuming roomData contains dimensions in inches\n    const { width, length, doorPosition, windowWall, windowPosition } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 32;\n    const doorThickness = 2;\n\n    const windowWidthInches = 22;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = width * scaleFactor;\n    const roomLength = length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2 *scaleFactor; // Height of the window line\n\n\n    // Your other code here...\n\n    return (\n        <div className=\"room-visualizer-container\">\n            <svg width={roomWidth} height={roomLength} className=\"room-svg\">\n                {/* Your SVG elements */}\n\n                {/* Door element with drag and drop functionality */}\n                <rect\n                    x={0} y={doorPositionY}\n                    width={2 * scaleFactor} height={doorWidth}\n                    fill=\"brown\"\n                    onMouseDown={handleMouseDown}\n                    style={{ cursor: 'grab' }} // Change cursor to indicate draggable element\n                />\n            </svg>\n        </div>\n    );\n}\n\n/*\n\nimport React from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\n\n\nfunction RoomVisualizer({ roomData }) {\n    // Assuming roomData contains dimensions in inches\n    const { width, length, doorPosition, windowWall, windowPosition } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 32;\n    const doorThickness = 2;\n\n    const windowWidthInches = 22;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = width * scaleFactor;\n    const roomLength = length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2 *scaleFactor; // Height of the window line\n\n    return (\n        <div className=\"room-visualizer-container\"> \n\n            <svg \n                width={roomWidth} \n                height={roomLength}\n                className=\"room-svg\"\n            >\n                <image href={floorImage} x=\"0\" y=\"0\" width={roomWidth} height={roomLength} preserveAspectRatio=\"none\" />\n \n\n                <rect x=\"0\" y={doorPosition * scaleFactor} width={2 * scaleFactor} height={doorWidth} fill=\"brown\" />\n\n               \n\n                {windowWall === 'top' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y=\"0\" width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'bottom' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y={roomLength - windowHeight} width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'left' && (\n                    <rect x=\"-5\" y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n                {windowWall === 'right' && (\n                    <rect x={(roomWidth)-5} y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n            </svg>\n        </div>\n    );\n}\n\nexport default RoomVisualizer;\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sBAAsB;AAC7B,OAAOC,UAAU,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAElC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvD,MAAMC,eAAe,GAAIC,KAAK,IAAK;IAC/B;IACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,OAAO;IAEnC,MAAMC,eAAe,GAAIH,KAAK,IAAK;MAC/B;MACA,MAAMI,MAAM,GAAGJ,KAAK,CAACE,OAAO;MAC5B,MAAMG,MAAM,GAAGD,MAAM,GAAGH,aAAa;MACrC,MAAMK,gBAAgB,GAAGV,aAAa,GAAGS,MAAM;;MAE/C;MACA,IAAIC,gBAAgB,IAAI,CAAC,IAAIA,gBAAgB,IAAIC,UAAU,EAAE;QACzDV,gBAAgB,CAACS,gBAAgB,CAAC;MACtC;IACJ,CAAC;IAED,MAAME,aAAa,GAAGA,CAAA,KAAM;MACxB;MACAC,MAAM,CAACC,mBAAmB,CAAC,WAAW,EAAEP,eAAe,CAAC;MACxDM,MAAM,CAACC,mBAAmB,CAAC,SAAS,EAAEF,aAAa,CAAC;IACxD,CAAC;;IAED;IACAC,MAAM,CAACE,gBAAgB,CAAC,WAAW,EAAER,eAAe,CAAC;IACrDM,MAAM,CAACE,gBAAgB,CAAC,SAAS,EAAEH,aAAa,CAAC;EACrD,CAAC;;EAED;EACA,MAAM;IAAEI,KAAK;IAAEC,MAAM;IAAEC,YAAY;IAAEC,UAAU;IAAEC;EAAe,CAAC,GAAGtB,QAAQ;;EAE5E;EACA,MAAMuB,WAAW,GAAG,CAAC;;EAErB;EACA,MAAMC,eAAe,GAAG,EAAE;EAC1B,MAAMC,aAAa,GAAG,CAAC;EAEvB,MAAMC,iBAAiB,GAAG,EAAE;;EAE5B;EACA,MAAMC,SAAS,GAAGT,KAAK,GAAGK,WAAW;EACrC,MAAMV,UAAU,GAAGM,MAAM,GAAGI,WAAW;;EAEvC;EACA,MAAMK,SAAS,GAAGJ,eAAe,GAAGD,WAAW;EAC/C,MAAMM,UAAU,GAAG,EAAE,GAAGN,WAAW,CAAC,CAAC;EACrC,MAAMO,YAAY,GAAG,CAAC,GAAEP,WAAW,CAAC,CAAC;;EAGrC;;EAEA,oBACIzB,OAAA;IAAKiC,SAAS,EAAC,2BAA2B;IAAAC,QAAA,eACtClC,OAAA;MAAKoB,KAAK,EAAES,SAAU;MAACM,MAAM,EAAEpB,UAAW;MAACkB,SAAS,EAAC,UAAU;MAAAC,QAAA,eAI3DlC,OAAA;QACIoC,CAAC,EAAE,CAAE;QAACC,CAAC,EAAEjC,aAAc;QACvBgB,KAAK,EAAE,CAAC,GAAGK,WAAY;QAACU,MAAM,EAAEL,SAAU;QAC1CQ,IAAI,EAAC,OAAO;QACZC,WAAW,EAAEhC,eAAgB;QAC7BiC,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAO,CAAE,CAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA1C,EAAA,CAzESF,cAAc;AAAA6C,EAAA,GAAd7C,cAAc;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}