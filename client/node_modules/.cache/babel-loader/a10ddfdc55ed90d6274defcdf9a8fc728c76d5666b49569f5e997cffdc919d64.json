{"ast":null,"code":"var _jsxFileName = \"/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoomVisualizer({\n  roomData\n}) {\n  // Assuming roomData contains dimensions in inches\n  const {\n    dimensions,\n    doorPlacement,\n    windowPlacement\n  } = roomData;\n\n  // Define the scale factor (1 inch = 10 SVG units)\n  const scaleFactor = 5;\n\n  // Door and window widths\n  const doorWidthInches = 2;\n  const windowWidthInches = 25;\n\n  // Convert inch measurements to SVG units\n  const roomWidth = dimensions.width * scaleFactor;\n  const roomLength = dimensions.length * scaleFactor;\n\n  // Calculate the width and height of the door and window proportionate to the room\n  const doorWidth = doorWidthInches * scaleFactor;\n  const doorHeight = 80 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n  const windowHeight = 2; // Height of the window line\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: roomWidth,\n    height: roomLength,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: roomWidth,\n      height: roomLength,\n      fill: \"lightgrey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: doorPlacement.x * scaleFactor,\n      y: doorPlacement.y * scaleFactor,\n      width: doorWidth,\n      height: doorHeight,\n      fill: \"brown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), windowPlacement.map((window, index) => {\n      let windowX = window.x * scaleFactor;\n      let windowY = window.y * scaleFactor;\n      let windowWidth = windowWidthInches * scaleFactor;\n\n      // Check if the window is vertical or horizontal\n      if (window.x === 0 || window.x === dimensions.width) {\n        // Vertical window\n        windowWidth = 2; // Width of the window line\n      } else if (window.y === 0 || window.y === dimensions.length) {\n        // Horizontal window\n        windowY -= windowHeight / 2; // Adjust Y position to center the horizontal window\n      }\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: windowX,\n        y: windowY,\n        width: windowWidth,\n        height: windowHeight,\n        fill: \"blue\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_c = RoomVisualizer;\nexport default RoomVisualizer;\nvar _c;\n$RefreshReg$(_c, \"RoomVisualizer\");","map":{"version":3,"names":["RoomVisualizer","roomData","dimensions","doorPlacement","windowPlacement","scaleFactor","doorWidthInches","windowWidthInches","roomWidth","width","roomLength","length","doorWidth","doorHeight","windowHeight","_jsxDEV","height","children","x","y","fill","fileName","_jsxFileName","lineNumber","columnNumber","map","window","index","windowX","windowY","windowWidth","_c","$RefreshReg$"],"sources":["/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx"],"sourcesContent":["function RoomVisualizer({ roomData }) {\n    // Assuming roomData contains dimensions in inches\n    const { dimensions, doorPlacement, windowPlacement } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 2;\n    const windowWidthInches = 25;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = dimensions.width * scaleFactor;\n    const roomLength = dimensions.length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 80 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2; // Height of the window line\n\n    return (\n        <svg width={roomWidth} height={roomLength}>\n            {/* Draw room walls */}\n            <rect x=\"0\" y=\"0\" width={roomWidth} height={roomLength} fill=\"lightgrey\" />\n\n            {/* Draw door */}\n            <rect x={doorPlacement.x * scaleFactor} y={doorPlacement.y * scaleFactor} width={doorWidth} height={doorHeight} fill=\"brown\" />\n\n            {/* Draw windows */}\n            {windowPlacement.map((window, index) => {\n                let windowX = window.x * scaleFactor;\n                let windowY = window.y * scaleFactor;\n                let windowWidth = windowWidthInches * scaleFactor;\n\n                // Check if the window is vertical or horizontal\n                if (window.x === 0 || window.x === dimensions.width) {\n                    // Vertical window\n                    windowWidth = 2; // Width of the window line\n                } else if (window.y === 0 || window.y === dimensions.length) {\n                    // Horizontal window\n                    windowY -= windowHeight / 2; // Adjust Y position to center the horizontal window\n                }\n\n                return (\n                    <rect key={index} x={windowX} y={windowY} width={windowWidth} height={windowHeight} fill=\"blue\" />\n                );\n            })}\n        </svg>\n    );\n}\n\nexport default RoomVisualizer;\n"],"mappings":";;AAAA,SAASA,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAClC;EACA,MAAM;IAAEC,UAAU;IAAEC,aAAa;IAAEC;EAAgB,CAAC,GAAGH,QAAQ;;EAE/D;EACA,MAAMI,WAAW,GAAG,CAAC;;EAErB;EACA,MAAMC,eAAe,GAAG,CAAC;EACzB,MAAMC,iBAAiB,GAAG,EAAE;;EAE5B;EACA,MAAMC,SAAS,GAAGN,UAAU,CAACO,KAAK,GAAGJ,WAAW;EAChD,MAAMK,UAAU,GAAGR,UAAU,CAACS,MAAM,GAAGN,WAAW;;EAElD;EACA,MAAMO,SAAS,GAAGN,eAAe,GAAGD,WAAW;EAC/C,MAAMQ,UAAU,GAAG,EAAE,GAAGR,WAAW,CAAC,CAAC;EACrC,MAAMS,YAAY,GAAG,CAAC,CAAC,CAAC;;EAExB,oBACIC,OAAA;IAAKN,KAAK,EAAED,SAAU;IAACQ,MAAM,EAAEN,UAAW;IAAAO,QAAA,gBAEtCF,OAAA;MAAMG,CAAC,EAAC,GAAG;MAACC,CAAC,EAAC,GAAG;MAACV,KAAK,EAAED,SAAU;MAACQ,MAAM,EAAEN,UAAW;MAACU,IAAI,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG3ET,OAAA;MAAMG,CAAC,EAAEf,aAAa,CAACe,CAAC,GAAGb,WAAY;MAACc,CAAC,EAAEhB,aAAa,CAACgB,CAAC,GAAGd,WAAY;MAACI,KAAK,EAAEG,SAAU;MAACI,MAAM,EAAEH,UAAW;MAACO,IAAI,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG9HpB,eAAe,CAACqB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACpC,IAAIC,OAAO,GAAGF,MAAM,CAACR,CAAC,GAAGb,WAAW;MACpC,IAAIwB,OAAO,GAAGH,MAAM,CAACP,CAAC,GAAGd,WAAW;MACpC,IAAIyB,WAAW,GAAGvB,iBAAiB,GAAGF,WAAW;;MAEjD;MACA,IAAIqB,MAAM,CAACR,CAAC,KAAK,CAAC,IAAIQ,MAAM,CAACR,CAAC,KAAKhB,UAAU,CAACO,KAAK,EAAE;QACjD;QACAqB,WAAW,GAAG,CAAC,CAAC,CAAC;MACrB,CAAC,MAAM,IAAIJ,MAAM,CAACP,CAAC,KAAK,CAAC,IAAIO,MAAM,CAACP,CAAC,KAAKjB,UAAU,CAACS,MAAM,EAAE;QACzD;QACAkB,OAAO,IAAIf,YAAY,GAAG,CAAC,CAAC,CAAC;MACjC;MAEA,oBACIC,OAAA;QAAkBG,CAAC,EAAEU,OAAQ;QAACT,CAAC,EAAEU,OAAQ;QAACpB,KAAK,EAAEqB,WAAY;QAACd,MAAM,EAAEF,YAAa;QAACM,IAAI,EAAC;MAAM,GAApFO,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiF,CAAC;IAE1G,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACO,EAAA,GAjDQ/B,cAAc;AAmDvB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}