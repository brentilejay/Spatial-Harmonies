{"ast":null,"code":"var _jsxFileName = \"/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoomVisualizer({\n  roomData\n}) {\n  // Assuming roomData contains dimensions in inches\n  const {\n    dimensions,\n    doorPlacement,\n    windowPlacement\n  } = roomData;\n\n  // Define the scale factor (1 inch = 10 SVG units)\n  const scaleFactor = 5;\n\n  // Convert inch measurements to SVG units\n  const roomWidth = dimensions.width * scaleFactor;\n  const roomLength = dimensions.length * scaleFactor;\n\n  // Convert door and window coordinates\n  const doorX = doorPlacement.x * scaleFactor;\n  const doorY = doorPlacement.y * scaleFactor;\n  const windowCoordinates = windowPlacement.map(window => ({\n    x: window.x * scaleFactor,\n    y: window.y * scaleFactor\n  }));\n\n  // Calculate the width of the door proportionate to its height\n  const doorHeight = 32 * scaleFactor; // Assuming the height of the door is 32 inches\n  const doorWidth = doorHeight * (2 / 3); // Assuming a standard aspect ratio of 2:3 for doors\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: roomWidth,\n    height: roomLength,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: roomWidth,\n      height: roomLength,\n      fill: \"lightgrey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: doorX,\n      y: \"0\",\n      width: doorWidth,\n      height: doorHeight,\n      fill: \"brown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), windowCoordinates.map((window, index) => /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: window.x,\n      y: window.y,\n      width: \"10\",\n      height: \"10\",\n      fill: \"blue\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_c = RoomVisualizer;\nexport default RoomVisualizer;\nvar _c;\n$RefreshReg$(_c, \"RoomVisualizer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RoomVisualizer","roomData","dimensions","doorPlacement","windowPlacement","scaleFactor","roomWidth","width","roomLength","length","doorX","x","doorY","y","windowCoordinates","map","window","doorHeight","doorWidth","height","children","fill","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx"],"sourcesContent":["import React from 'react';\n\nfunction RoomVisualizer({ roomData }) {\n    // Assuming roomData contains dimensions in inches\n    const { dimensions, doorPlacement, windowPlacement } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = dimensions.width * scaleFactor;\n    const roomLength = dimensions.length * scaleFactor;\n\n    // Convert door and window coordinates\n    const doorX = doorPlacement.x * scaleFactor;\n    const doorY = doorPlacement.y * scaleFactor;\n\n    const windowCoordinates = windowPlacement.map(window => ({\n        x: window.x * scaleFactor,\n        y: window.y * scaleFactor\n    }));\n\n    // Calculate the width of the door proportionate to its height\n    const doorHeight = 32 * scaleFactor; // Assuming the height of the door is 32 inches\n    const doorWidth = doorHeight * (2 / 3); // Assuming a standard aspect ratio of 2:3 for doors\n\n    return (\n        <svg width={roomWidth} height={roomLength}>\n            {/* Draw room walls */}\n            <rect x=\"0\" y=\"0\" width={roomWidth} height={roomLength} fill=\"lightgrey\" />\n\n            {/* Draw door */}\n            <rect x={doorX} y=\"0\" width={doorWidth} height={doorHeight} fill=\"brown\" />\n\n            {/* Draw windows */}\n            {windowCoordinates.map((window, index) => (\n                <rect key={index} x={window.x} y={window.y} width=\"10\" height=\"10\" fill=\"blue\" />\n            ))}\n        </svg>\n    );\n\n}\n\nexport default RoomVisualizer;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAClC;EACA,MAAM;IAAEC,UAAU;IAAEC,aAAa;IAAEC;EAAgB,CAAC,GAAGH,QAAQ;;EAE/D;EACA,MAAMI,WAAW,GAAG,CAAC;;EAErB;EACA,MAAMC,SAAS,GAAGJ,UAAU,CAACK,KAAK,GAAGF,WAAW;EAChD,MAAMG,UAAU,GAAGN,UAAU,CAACO,MAAM,GAAGJ,WAAW;;EAElD;EACA,MAAMK,KAAK,GAAGP,aAAa,CAACQ,CAAC,GAAGN,WAAW;EAC3C,MAAMO,KAAK,GAAGT,aAAa,CAACU,CAAC,GAAGR,WAAW;EAE3C,MAAMS,iBAAiB,GAAGV,eAAe,CAACW,GAAG,CAACC,MAAM,KAAK;IACrDL,CAAC,EAAEK,MAAM,CAACL,CAAC,GAAGN,WAAW;IACzBQ,CAAC,EAAEG,MAAM,CAACH,CAAC,GAAGR;EAClB,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMY,UAAU,GAAG,EAAE,GAAGZ,WAAW,CAAC,CAAC;EACrC,MAAMa,SAAS,GAAGD,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;EAExC,oBACIlB,OAAA;IAAKQ,KAAK,EAAED,SAAU;IAACa,MAAM,EAAEX,UAAW;IAAAY,QAAA,gBAEtCrB,OAAA;MAAMY,CAAC,EAAC,GAAG;MAACE,CAAC,EAAC,GAAG;MAACN,KAAK,EAAED,SAAU;MAACa,MAAM,EAAEX,UAAW;MAACa,IAAI,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG3E1B,OAAA;MAAMY,CAAC,EAAED,KAAM;MAACG,CAAC,EAAC,GAAG;MAACN,KAAK,EAAEW,SAAU;MAACC,MAAM,EAAEF,UAAW;MAACI,IAAI,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG1EX,iBAAiB,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEU,KAAK,kBACjC3B,OAAA;MAAkBY,CAAC,EAAEK,MAAM,CAACL,CAAE;MAACE,CAAC,EAAEG,MAAM,CAACH,CAAE;MAACN,KAAK,EAAC,IAAI;MAACY,MAAM,EAAC,IAAI;MAACE,IAAI,EAAC;IAAM,GAAnEK,KAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgE,CACnF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGd;AAACE,EAAA,GAvCQ3B,cAAc;AAyCvB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}