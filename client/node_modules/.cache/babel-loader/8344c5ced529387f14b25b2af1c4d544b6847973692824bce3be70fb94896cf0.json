{"ast":null,"code":"var _jsxFileName = \"/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx\",\n  _s = $RefreshSig$();\n//import React from 'react';\nimport React, { useState } from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RoomVisualizer({\n  roomData\n}) {\n  _s();\n  const [doorPositionY, setDoorPositionY] = useState(0); // Initial position of the door\n  const [doorPositionText, setDoorPositionText] = useState('Door Position = 0');\n  const handleMouseDown = event => {\n    // Calculate initial mouse position\n    const initialMouseY = event.clientY;\n    const handleMouseMove = event => {\n      // Calculate the new position of the door based on mouse movement\n      const mouseY = event.clientY;\n      const deltaY = mouseY - initialMouseY;\n      const newDoorPositionY = doorPositionY + deltaY;\n\n      // Update the position of the door within the bounds of the left wall\n      if (newDoorPositionY >= 0 && newDoorPositionY <= roomLength) {\n        setDoorPositionY(newDoorPositionY);\n        setDoorPositionText(`Door Position = ${newDoorPositionY / 5}`);\n      }\n    };\n    const handleMouseUp = () => {\n      // Remove event listeners when mouse is released\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    // Add event listeners for mouse movement and release\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Assuming roomData contains dimensions in inches\n  const {\n    width,\n    length,\n    doorPosition,\n    windowWall,\n    windowPosition\n  } = roomData;\n\n  // Define the scale factor (1 inch = 10 SVG units)\n  const scaleFactor = 5;\n\n  // Door and window widths\n  const doorWidthInches = 32;\n  const doorThickness = 2;\n  const windowWidthInches = 22;\n\n  // Convert inch measurements to SVG units\n  const roomWidth = width * scaleFactor;\n  const roomLength = length * scaleFactor;\n\n  // Calculate the width and height of the door and window proportionate to the room\n  const doorWidth = doorWidthInches * scaleFactor;\n  const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n  const windowHeight = 2 * scaleFactor; // Height of the window line\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: roomWidth,\n      height: roomLength,\n      className: \"room-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"image\", {\n        href: floorImage,\n        x: \"0\",\n        y: \"0\",\n        width: roomWidth,\n        height: roomLength,\n        preserveAspectRatio: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), windowWall === 'top' && /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: windowPosition * scaleFactor - 11 * scaleFactor,\n        y: \"0\",\n        width: windowWidthInches * scaleFactor,\n        height: windowHeight,\n        fill: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), windowWall === 'bottom' && /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: windowPosition * scaleFactor - 11 * scaleFactor,\n        y: roomLength - windowHeight,\n        width: windowWidthInches * scaleFactor,\n        height: windowHeight,\n        fill: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), windowWall === 'left' && /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: \"-5\",\n        y: windowPosition * scaleFactor,\n        width: windowHeight,\n        height: windowWidthInches * scaleFactor,\n        fill: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), windowWall === 'right' && /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: roomWidth - 5,\n        y: windowPosition * scaleFactor,\n        width: windowHeight,\n        height: windowWidthInches * scaleFactor,\n        fill: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: 0,\n        y: doorPositionY,\n        width: 2 * scaleFactor,\n        height: doorWidth,\n        fill: \"brown\",\n        onMouseDown: handleMouseDown,\n        style: {\n          cursor: 'grab'\n        } // Change cursor to indicate draggable element\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginLeft: '10px'\n      },\n      children: [\"Door Position: \", doorPositionText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(RoomVisualizer, \"1Xdo53B+5P/hHBM6Dnyz28uwYB0=\");\n_c = RoomVisualizer;\nexport default RoomVisualizer;\n\n/*\n\nimport React from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\n\n\nfunction RoomVisualizer({ roomData }) {\n    // Assuming roomData contains dimensions in inches\n    const { width, length, doorPosition, windowWall, windowPosition } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 32;\n    const doorThickness = 2;\n\n    const windowWidthInches = 22;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = width * scaleFactor;\n    const roomLength = length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2 *scaleFactor; // Height of the window line\n\n    return (\n        <div className=\"room-visualizer-container\"> \n\n            <svg \n                width={roomWidth} \n                height={roomLength}\n                className=\"room-svg\"\n            >\n                <image href={floorImage} x=\"0\" y=\"0\" width={roomWidth} height={roomLength} preserveAspectRatio=\"none\" />\n \n\n                <rect x=\"0\" y={doorPosition * scaleFactor} width={2 * scaleFactor} height={doorWidth} fill=\"brown\" />\n\n               \n\n                {windowWall === 'top' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y=\"0\" width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'bottom' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y={roomLength - windowHeight} width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'left' && (\n                    <rect x=\"-5\" y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n                {windowWall === 'right' && (\n                    <rect x={(roomWidth)-5} y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n            </svg>\n        </div>\n    );\n}\n\nexport default RoomVisualizer;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"RoomVisualizer\");","map":{"version":3,"names":["React","useState","floorImage","jsxDEV","_jsxDEV","RoomVisualizer","roomData","_s","doorPositionY","setDoorPositionY","doorPositionText","setDoorPositionText","handleMouseDown","event","initialMouseY","clientY","handleMouseMove","mouseY","deltaY","newDoorPositionY","roomLength","handleMouseUp","window","removeEventListener","addEventListener","width","length","doorPosition","windowWall","windowPosition","scaleFactor","doorWidthInches","doorThickness","windowWidthInches","roomWidth","doorWidth","doorHeight","windowHeight","className","children","height","href","x","y","preserveAspectRatio","fileName","_jsxFileName","lineNumber","columnNumber","fill","onMouseDown","style","cursor","marginLeft","_c","$RefreshReg$"],"sources":["/Users/brentilejay/Projects/Spatial-Harmonies/client/src/components/RoomVisualizer/RoomVisualizer.jsx"],"sourcesContent":["//import React from 'react';\nimport React, { useState } from 'react';\n\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\n\nfunction RoomVisualizer({ roomData }) {\n    \n    const [doorPositionY, setDoorPositionY] = useState(0); // Initial position of the door\n    const [doorPositionText, setDoorPositionText] = useState('Door Position = 0');\n\n    const handleMouseDown = (event) => {\n        // Calculate initial mouse position\n        const initialMouseY = event.clientY;\n\n        const handleMouseMove = (event) => {\n            // Calculate the new position of the door based on mouse movement\n            const mouseY = event.clientY;\n            const deltaY = mouseY - initialMouseY;\n            const newDoorPositionY = doorPositionY + deltaY;\n\n            // Update the position of the door within the bounds of the left wall\n            if (newDoorPositionY >= 0 && newDoorPositionY <= roomLength) {\n                setDoorPositionY(newDoorPositionY);\n                setDoorPositionText(`Door Position = ${newDoorPositionY/5}`);\n            }\n        };\n\n        const handleMouseUp = () => {\n            // Remove event listeners when mouse is released\n            window.removeEventListener('mousemove', handleMouseMove);\n            window.removeEventListener('mouseup', handleMouseUp);\n        };\n\n        // Add event listeners for mouse movement and release\n        window.addEventListener('mousemove', handleMouseMove);\n        window.addEventListener('mouseup', handleMouseUp);\n    };\n\n    // Assuming roomData contains dimensions in inches\n    const { width, length, doorPosition, windowWall, windowPosition } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 32;\n    const doorThickness = 2;\n\n    const windowWidthInches = 22;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = width * scaleFactor;\n    const roomLength = length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2 *scaleFactor; // Height of the window line\n\n\n\n    return (\n        <div className=\"room-visualizer-container\">\n            <svg width={roomWidth} height={roomLength} className=\"room-svg\">\n                {/* Your SVG elements */}\n                <image href={floorImage} x=\"0\" y=\"0\" width={roomWidth} height={roomLength} preserveAspectRatio=\"none\" />\n \n{/*\n                <rect x=\"0\" y={doorPosition * scaleFactor} width={2 * scaleFactor} height={doorWidth} fill=\"brown\" />\n*/}\n               \n\n                {windowWall === 'top' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y=\"0\" width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'bottom' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y={roomLength - windowHeight} width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'left' && (\n                    <rect x=\"-5\" y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n                {windowWall === 'right' && (\n                    <rect x={(roomWidth)-5} y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n\n                {/* Door element with drag and drop functionality */}\n                <rect\n                    x={0} y={doorPositionY}\n                    width={2 * scaleFactor} height={doorWidth}\n                    fill=\"brown\"\n                    onMouseDown={handleMouseDown}\n                    style={{ cursor: 'grab' }} // Change cursor to indicate draggable element\n                />\n                \n            </svg>\n            {/* Display door position */}\n            <h2 style={{ marginLeft: '10px' }}>Door Position: {doorPositionText}</h2>\n\n        </div>\n    );\n}\nexport default RoomVisualizer;\n\n/*\n\nimport React from 'react';\nimport './RoomVisualizer.css';\nimport floorImage from '../images/WoodFloorPattern.jpeg';\n\n\nfunction RoomVisualizer({ roomData }) {\n    // Assuming roomData contains dimensions in inches\n    const { width, length, doorPosition, windowWall, windowPosition } = roomData;\n\n    // Define the scale factor (1 inch = 10 SVG units)\n    const scaleFactor = 5;\n\n    // Door and window widths\n    const doorWidthInches = 32;\n    const doorThickness = 2;\n\n    const windowWidthInches = 22;\n\n    // Convert inch measurements to SVG units\n    const roomWidth = width * scaleFactor;\n    const roomLength = length * scaleFactor;\n\n    // Calculate the width and height of the door and window proportionate to the room\n    const doorWidth = doorWidthInches * scaleFactor;\n    const doorHeight = 32 * scaleFactor; // Assuming door height is 80 inches, adjust as needed\n    const windowHeight = 2 *scaleFactor; // Height of the window line\n\n    return (\n        <div className=\"room-visualizer-container\"> \n\n            <svg \n                width={roomWidth} \n                height={roomLength}\n                className=\"room-svg\"\n            >\n                <image href={floorImage} x=\"0\" y=\"0\" width={roomWidth} height={roomLength} preserveAspectRatio=\"none\" />\n \n\n                <rect x=\"0\" y={doorPosition * scaleFactor} width={2 * scaleFactor} height={doorWidth} fill=\"brown\" />\n\n               \n\n                {windowWall === 'top' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y=\"0\" width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'bottom' && (\n                    <rect x={(windowPosition * scaleFactor) - (11*scaleFactor)} y={roomLength - windowHeight} width={windowWidthInches * scaleFactor} height={windowHeight} fill=\"blue\" />\n                )}\n                {windowWall === 'left' && (\n                    <rect x=\"-5\" y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n                {windowWall === 'right' && (\n                    <rect x={(roomWidth)-5} y={windowPosition * scaleFactor} width={windowHeight} height={windowWidthInches * scaleFactor} fill=\"blue\" />\n                )}\n            </svg>\n        </div>\n    );\n}\n\nexport default RoomVisualizer;\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}